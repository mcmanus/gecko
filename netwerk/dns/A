028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700   1) /* vim:set ts=4 sw=4 sts=4 et cin: */
a692f624f1fce netwerk/dns/nsHostResolver.h     (Gervase Markham     2012-05-21 12:12:37 +0100   2) /* This Source Code Form is subject to the terms of the Mozilla Public
a692f624f1fce netwerk/dns/nsHostResolver.h     (Gervase Markham     2012-05-21 12:12:37 +0100   3)  * License, v. 2.0. If a copy of the MPL was not distributed with this
a692f624f1fce netwerk/dns/nsHostResolver.h     (Gervase Markham     2012-05-21 12:12:37 +0100   4)  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700   5) 
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700   6) #ifndef nsHostResolver_h__
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700   7) #define nsHostResolver_h__
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700   8) 
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700   9) #include "nscore.h"
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700  10) #include "prclist.h"
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700  11) #include "prnetdb.h"
c13e7d902d751 netwerk/dns/nsHostResolver.h     (Nicholas Nethercote 2015-09-15 20:49:53 -0700  12) #include "PLDHashTable.h"
8482ea14026ca netwerk/dns/nsHostResolver.h     (Chris Jones         2011-03-31 23:29:02 -0500  13) #include "mozilla/CondVar.h"
8482ea14026ca netwerk/dns/nsHostResolver.h     (Chris Jones         2011-03-31 23:29:02 -0500  14) #include "mozilla/Mutex.h"
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700  15) #include "nsISupportsImpl.h"
f2b99bb1107d1 netwerk/dns/nsHostResolver.h     (Steve Workman       2012-01-20 15:14:46 -0800  16) #include "nsIDNSListener.h"
56ee721e9cf48 netwerk/dns/nsHostResolver.h     (Jonathan Watt       2015-09-14 14:46:47 +0100  17) #include "nsIDNSService.h"
dac053425bb2c netwerk/dns/nsHostResolver.h     (Patrick McManus     2011-07-21 09:18:01 -0400  18) #include "nsString.h"
dac053425bb2c netwerk/dns/nsHostResolver.h     (Patrick McManus     2011-07-21 09:18:01 -0400  19) #include "nsTArray.h"
e693238971900 netwerk/dns/nsHostResolver.h     (John Sullivan       2014-09-20 15:10:18 -0700  20) #include "GetAddrInfo.h"
eb14621d6fab4 netwerk/dns/nsHostResolver.h     (Josh Aas            2012-12-23 16:08:43 -0500  21) #include "mozilla/net/DNS.h"
79d3bb249cf64 netwerk/dns/nsHostResolver.h     (Valentin Gosu       2012-12-10 09:13:55 -0500  22) #include "mozilla/net/DashboardTypes.h"
dea941a544ef0 netwerk/dns/nsHostResolver.h     (Josh Aas            2013-02-14 09:03:51 -0600  23) #include "mozilla/TimeStamp.h"
a081507afeba8 netwerk/dns/nsHostResolver.h     (Jeff Hemphill       2017-11-25 23:37:24 -0800  24) #include "mozilla/UniquePtr.h"
fe6a4ef142281 netwerk/dns/nsHostResolver.h     (Daniel Stenberg     2017-12-13 11:43:22 +0100  25) #include "mozilla/DataStorage.h"
eaf658685b215 netwerk/dns/nsHostResolver.h     (Daniel Stenberg     2017-12-07 11:22:05 +0100  26) #include "TRRService.h"
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700  27) 
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700  28) class nsHostResolver;
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700  29) class nsHostRecord;
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700  30) class nsResolveHostCallback;
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700  31) 
82a2f4564e58b netwerk/dns/src/nsHostResolver.h (Patrick McManus     2008-11-07 18:00:26 -0500  32) #define MAX_RESOLVER_THREADS_FOR_ANY_PRIORITY  3
82a2f4564e58b netwerk/dns/src/nsHostResolver.h (Patrick McManus     2008-11-07 18:00:26 -0500  33) #define MAX_RESOLVER_THREADS_FOR_HIGH_PRIORITY 5
c9b4d9e86f72c netwerk/dns/nsHostResolver.h     (Patrick McManus     2011-10-12 18:01:24 -0400  34) #define MAX_NON_PRIORITY_REQUESTS 150
c9b4d9e86f72c netwerk/dns/nsHostResolver.h     (Patrick McManus     2011-10-12 18:01:24 -0400  35) 
82a2f4564e58b netwerk/dns/src/nsHostResolver.h (Patrick McManus     2008-11-07 18:00:26 -0500  36) #define MAX_RESOLVER_THREADS (MAX_RESOLVER_THREADS_FOR_ANY_PRIORITY + \
82a2f4564e58b netwerk/dns/src/nsHostResolver.h (Patrick McManus     2008-11-07 18:00:26 -0500  37)                               MAX_RESOLVER_THREADS_FOR_HIGH_PRIORITY)
82a2f4564e58b netwerk/dns/src/nsHostResolver.h (Patrick McManus     2008-11-07 18:00:26 -0500  38) 
fe6a4ef142281 netwerk/dns/nsHostResolver.h     (Daniel Stenberg     2017-12-13 11:43:22 +0100  39) const static uint32_t kTRRBlacklistExpireTime = 3600*24*3; // three days
7a99befc3dd90 netwerk/dns/nsHostResolver.h     (Daniel Stenberg     2017-12-04 14:29:39 +0100  40) 
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700  41) struct nsHostKey
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700  42) {
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700  43)     const char *host;
f813447550db8 netwerk/dns/nsHostResolver.h     (Ehsan Akhgari       2012-08-22 11:56:38 -0400  44)     uint16_t    flags;
f813447550db8 netwerk/dns/nsHostResolver.h     (Ehsan Akhgari       2012-08-22 11:56:38 -0400  45)     uint16_t    af;
1f09d48c96f65 netwerk/dns/nsHostResolver.h     (Dragana Damjanovic  2015-02-19 00:14:00 -0500  46)     const char *netInterface;
223dc31f8d5fe netwerk/dns/nsHostResolver.h     (Tim Huang           2017-02-14 12:25:35 +0800  47)     const char *originSuffix;
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700  48) };
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700  49) 
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700  50) /**
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700  51)  * nsHostRecord - ref counted object type stored in host resolver cache.
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700  52)  */
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700  53) class nsHostRecord : public PRCList, public nsHostKey
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700  54) {
8482ea14026ca netwerk/dns/nsHostResolver.h     (Chris Jones         2011-03-31 23:29:02 -0500  55)     typedef mozilla::Mutex Mutex;
8482ea14026ca netwerk/dns/nsHostResolver.h     (Chris Jones         2011-03-31 23:29:02 -0500  56) 
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700  57) public:
a642dfceae40d netwerk/dns/nsHostResolver.h     (Josh Aas            2012-07-10 10:14:01 -0400  58)     NS_INLINE_DECL_THREADSAFE_REFCOUNTING(nsHostRecord)
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700  59) 
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700  60)     /* instantiates a new host record */
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700  61)     static nsresult Create(const nsHostKey *key, nsHostRecord **record);
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700  62) 
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700  63)     /* a fully resolved host record has either a non-null |addr_info| or |addr|
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700  64)      * field.  if |addr_info| is null, it implies that the |host| is an IP
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700  65)      * address literal.  in which case, |addr| contains the parsed address.
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700  66)      * otherwise, if |addr_info| is non-null, then it contains one or many
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700  67)      * IP addresses corresponding to the given host name.  if both |addr_info|
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700  68)      * and |addr| are null, then the given host has not yet been fully resolved.
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700  69)      * |af| is the address family of the record we are querying for.
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700  70)      */
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700  71) 
1b727ddb9ebc0 netwerk/dns/src/nsHostResolver.h (                    2007-12-11 13:45:42 -0800  72)     /* the lock protects |addr_info| and |addr_info_gencnt| because they
1b727ddb9ebc0 netwerk/dns/src/nsHostResolver.h (                    2007-12-11 13:45:42 -0800  73)      * are mutable and accessed by the resolver worker thread and the
1b727ddb9ebc0 netwerk/dns/src/nsHostResolver.h (                    2007-12-11 13:45:42 -0800  74)      * nsDNSService2 class.  |addr| doesn't change after it has been
1b727ddb9ebc0 netwerk/dns/src/nsHostResolver.h (                    2007-12-11 13:45:42 -0800  75)      * assigned a value.  only the resolver worker thread modifies
1b727ddb9ebc0 netwerk/dns/src/nsHostResolver.h (                    2007-12-11 13:45:42 -0800  76)      * nsHostRecord (and only in nsHostResolver::OnLookupComplete);
1b727ddb9ebc0 netwerk/dns/src/nsHostResolver.h (                    2007-12-11 13:45:42 -0800  77)      * the other threads just read it.  therefore the resolver worker
1b727ddb9ebc0 netwerk/dns/src/nsHostResolver.h (                    2007-12-11 13:45:42 -0800  78)      * thread doesn't need to lock when reading |addr_info|.
1b727ddb9ebc0 netwerk/dns/src/nsHostResolver.h (                    2007-12-11 13:45:42 -0800  79)      */
dac053425bb2c netwerk/dns/nsHostResolver.h     (Patrick McManus     2011-07-21 09:18:01 -0400  80)     Mutex        addr_info_lock;
41b8626949f1a netwerk/dns/nsHostResolver.h     (Patrick McManus     2014-08-21 10:53:11 -0400  81)     int          addr_info_gencnt; /* generation count of |addr_info| */
e195aa69397c0 netwerk/dns/nsHostResolver.h     (Valentin Gosu       2017-12-04 16:02:59 +0100  82)     mozilla::net::AddrInfo *addr_info;
a081507afeba8 netwerk/dns/nsHostResolver.h     (Jeff Hemphill       2017-11-25 23:37:24 -0800  83)     mozilla::UniquePtr<mozilla::net::NetAddr> addr;
2fc71b1789f46 netwerk/dns/nsHostResolver.h     (Michael Wu          2011-09-28 23:19:26 -0700  84)     bool         negative;   /* True if this record is a cache of a failed lookup.
3966d1412ccd6 netwerk/dns/src/nsHostResolver.h (Patrick McManus     2008-10-13 17:04:09 -0400  85)                                 Negative cache entries are valid just like any other
3966d1412ccd6 netwerk/dns/src/nsHostResolver.h (Patrick McManus     2008-10-13 17:04:09 -0400  86)                                 (though never for more than 60 seconds), but a use
3966d1412ccd6 netwerk/dns/src/nsHostResolver.h (Patrick McManus     2008-10-13 17:04:09 -0400  87)                                 of that negative entry forces an asynchronous refresh. */
3966d1412ccd6 netwerk/dns/src/nsHostResolver.h (Patrick McManus     2008-10-13 17:04:09 -0400  88) 
e693238971900 netwerk/dns/nsHostResolver.h     (John Sullivan       2014-09-20 15:10:18 -0700  89)     enum ExpirationStatus {
e693238971900 netwerk/dns/nsHostResolver.h     (John Sullivan       2014-09-20 15:10:18 -0700  90)         EXP_VALID,
e693238971900 netwerk/dns/nsHostResolver.h     (John Sullivan       2014-09-20 15:10:18 -0700  91)         EXP_GRACE,
e693238971900 netwerk/dns/nsHostResolver.h     (John Sullivan       2014-09-20 15:10:18 -0700  92)         EXP_EXPIRED,
e693238971900 netwerk/dns/nsHostResolver.h     (John Sullivan       2014-09-20 15:10:18 -0700  93)     };
e693238971900 netwerk/dns/nsHostResolver.h     (John Sullivan       2014-09-20 15:10:18 -0700  94) 
e693238971900 netwerk/dns/nsHostResolver.h     (John Sullivan       2014-09-20 15:10:18 -0700  95)     ExpirationStatus CheckExpiration(const mozilla::TimeStamp& now) const;
e693238971900 netwerk/dns/nsHostResolver.h     (John Sullivan       2014-09-20 15:10:18 -0700  96) 
e693238971900 netwerk/dns/nsHostResolver.h     (John Sullivan       2014-09-20 15:10:18 -0700  97)     // When the record began being valid. Used mainly for bookkeeping.
e693238971900 netwerk/dns/nsHostResolver.h     (John Sullivan       2014-09-20 15:10:18 -0700  98)     mozilla::TimeStamp mValidStart;
e693238971900 netwerk/dns/nsHostResolver.h     (John Sullivan       2014-09-20 15:10:18 -0700  99) 
e693238971900 netwerk/dns/nsHostResolver.h     (John Sullivan       2014-09-20 15:10:18 -0700 100)     // When the record is no longer valid (it's time of expiration)
e693238971900 netwerk/dns/nsHostResolver.h     (John Sullivan       2014-09-20 15:10:18 -0700 101)     mozilla::TimeStamp mValidEnd;
e693238971900 netwerk/dns/nsHostResolver.h     (John Sullivan       2014-09-20 15:10:18 -0700 102) 
e693238971900 netwerk/dns/nsHostResolver.h     (John Sullivan       2014-09-20 15:10:18 -0700 103)     // When the record enters its grace period. This must be before mValidEnd.
e693238971900 netwerk/dns/nsHostResolver.h     (John Sullivan       2014-09-20 15:10:18 -0700 104)     // If a record is in its grace period (and not expired), it will be used
e693238971900 netwerk/dns/nsHostResolver.h     (John Sullivan       2014-09-20 15:10:18 -0700 105)     // but a request to refresh it will be made.
e693238971900 netwerk/dns/nsHostResolver.h     (John Sullivan       2014-09-20 15:10:18 -0700 106)     mozilla::TimeStamp mGraceStart;
e693238971900 netwerk/dns/nsHostResolver.h     (John Sullivan       2014-09-20 15:10:18 -0700 107) 
653220a84cdeb netwerk/dns/nsHostResolver.h     (Daniel Stenberg     2017-12-12 11:22:16 +0100 108)     // When the lookups of this record started and their durations
653220a84cdeb netwerk/dns/nsHostResolver.h     (Daniel Stenberg     2017-12-12 11:22:16 +0100 109)     mozilla::TimeStamp mTrrStart;
653220a84cdeb netwerk/dns/nsHostResolver.h     (Daniel Stenberg     2017-12-12 11:22:16 +0100 110)     mozilla::TimeStamp mNativeStart;
653220a84cdeb netwerk/dns/nsHostResolver.h     (Daniel Stenberg     2017-12-12 11:22:16 +0100 111)     mozilla::TimeDuration mTrrDuration;
653220a84cdeb netwerk/dns/nsHostResolver.h     (Daniel Stenberg     2017-12-12 11:22:16 +0100 112)     mozilla::TimeDuration mNativeDuration;
653220a84cdeb netwerk/dns/nsHostResolver.h     (Daniel Stenberg     2017-12-12 11:22:16 +0100 113) 
e693238971900 netwerk/dns/nsHostResolver.h     (John Sullivan       2014-09-20 15:10:18 -0700 114)     // Convenience function for setting the timestamps above (mValidStart,
e693238971900 netwerk/dns/nsHostResolver.h     (John Sullivan       2014-09-20 15:10:18 -0700 115)     // mValidEnd, and mGraceStart). valid and grace are durations in seconds.
e693238971900 netwerk/dns/nsHostResolver.h     (John Sullivan       2014-09-20 15:10:18 -0700 116)     void SetExpiration(const mozilla::TimeStamp& now, unsigned int valid,
e693238971900 netwerk/dns/nsHostResolver.h     (John Sullivan       2014-09-20 15:10:18 -0700 117)                        unsigned int grace);
da0e9447fb5e5 netwerk/dns/nsHostResolver.h     (Dragana Damjanovic  2015-02-10 08:45:00 -0500 118)     void CopyExpirationTimesAndFlagsFrom(const nsHostRecord *aFromHostRecord);
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 119) 
e693238971900 netwerk/dns/nsHostResolver.h     (John Sullivan       2014-09-20 15:10:18 -0700 120)     // Checks if the record is usable (not expired and has a value)
e693238971900 netwerk/dns/nsHostResolver.h     (John Sullivan       2014-09-20 15:10:18 -0700 121)     bool HasUsableResult(const mozilla::TimeStamp& now, uint16_t queryFlags = 0) const;
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 122) 
dac053425bb2c netwerk/dns/nsHostResolver.h     (Patrick McManus     2011-07-21 09:18:01 -0400 123)     // hold addr_info_lock when calling the blacklist functions
eb14621d6fab4 netwerk/dns/nsHostResolver.h     (Josh Aas            2012-12-23 16:08:43 -0500 124)     bool   Blacklisted(mozilla::net::NetAddr *query);
dac053425bb2c netwerk/dns/nsHostResolver.h     (Patrick McManus     2011-07-21 09:18:01 -0400 125)     void   ResetBlacklist();
eb14621d6fab4 netwerk/dns/nsHostResolver.h     (Josh Aas            2012-12-23 16:08:43 -0500 126)     void   ReportUnusable(mozilla::net::NetAddr *addr);
dac053425bb2c netwerk/dns/nsHostResolver.h     (Patrick McManus     2011-07-21 09:18:01 -0400 127) 
ad236f25f0b6a netwerk/dns/nsHostResolver.h     (Nicholas Nethercote 2013-11-24 15:24:12 -0800 128)     size_t SizeOfIncludingThis(mozilla::MallocSizeOf mallocSizeOf) const;
ad236f25f0b6a netwerk/dns/nsHostResolver.h     (Nicholas Nethercote 2013-11-24 15:24:12 -0800 129) 
e693238971900 netwerk/dns/nsHostResolver.h     (John Sullivan       2014-09-20 15:10:18 -0700 130)     enum DnsPriority {
e693238971900 netwerk/dns/nsHostResolver.h     (John Sullivan       2014-09-20 15:10:18 -0700 131)         DNS_PRIORITY_LOW,
e693238971900 netwerk/dns/nsHostResolver.h     (John Sullivan       2014-09-20 15:10:18 -0700 132)         DNS_PRIORITY_MEDIUM,
e693238971900 netwerk/dns/nsHostResolver.h     (John Sullivan       2014-09-20 15:10:18 -0700 133)         DNS_PRIORITY_HIGH,
e693238971900 netwerk/dns/nsHostResolver.h     (John Sullivan       2014-09-20 15:10:18 -0700 134)     };
e693238971900 netwerk/dns/nsHostResolver.h     (John Sullivan       2014-09-20 15:10:18 -0700 135)     static DnsPriority GetPriority(uint16_t aFlags);
e693238971900 netwerk/dns/nsHostResolver.h     (John Sullivan       2014-09-20 15:10:18 -0700 136) 
6a4e809e3cc1f netwerk/dns/nsHostResolver.h     (Daniel Stenberg     2014-10-13 23:07:00 +0200 137)     bool RemoveOrRefresh(); // Mark records currently being resolved as needed
6a4e809e3cc1f netwerk/dns/nsHostResolver.h     (Daniel Stenberg     2014-10-13 23:07:00 +0200 138)                             // to resolve again.
5bbe5797c4d0d netwerk/dns/nsHostResolver.h     (Daniel Stenberg     2017-11-30 08:28:45 +0100 139)     bool IsTRR() { return mTRRUsed; }
eaf658685b215 netwerk/dns/nsHostResolver.h     (Daniel Stenberg     2017-12-07 11:22:05 +0100 140)     mozilla::net::ResolverMode mResolverMode;
b1e46ec83f2c0 netwerk/dns/nsHostResolver.h     (Daniel Stenberg     2014-09-24 23:14:00 -0400 141) 
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 142) private:
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 143)     friend class nsHostResolver;
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 144) 
e693238971900 netwerk/dns/nsHostResolver.h     (John Sullivan       2014-09-20 15:10:18 -0700 145) 
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 146)     PRCList callbacks; /* list of callbacks */
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 147) 
422af477cc1b9 netwerk/dns/nsHostResolver.h     (Daniel Stenberg     2017-11-21 16:24:45 +0100 148)     bool    resolving;  /* true while this record is not yet resolved */
422af477cc1b9 netwerk/dns/nsHostResolver.h     (Daniel Stenberg     2017-11-21 16:24:45 +0100 149)     bool    mNative;    /* true if this record is being resolved "natively",
422af477cc1b9 netwerk/dns/nsHostResolver.h     (Daniel Stenberg     2017-11-21 16:24:45 +0100 150)                          * which means that it is either on the pending queue
422af477cc1b9 netwerk/dns/nsHostResolver.h     (Daniel Stenberg     2017-11-21 16:24:45 +0100 151)                          * or owned by one of the worker threads. */
94a34572a6c20 netwerk/dns/nsHostResolver.h     (Daniel Stenberg     2017-11-24 12:00:58 +0100 152)     int     mTRRCount;   /* number of outstanding TRR resolves */
422af477cc1b9 netwerk/dns/nsHostResolver.h     (Daniel Stenberg     2017-11-21 16:24:45 +0100 153)     int     mTRRSuccess; /* number of successful TRR responses */
94a34572a6c20 netwerk/dns/nsHostResolver.h     (Daniel Stenberg     2017-11-24 12:00:58 +0100 154)     bool    mTRRUsed;   /* TRR was used on this record */
94a34572a6c20 netwerk/dns/nsHostResolver.h     (Daniel Stenberg     2017-11-24 12:00:58 +0100 155)     int     mNativeSuccess; /* number of native lookup responses */
9a19d53468acd netwerk/dns/nsHostResolver.h     (Daniel Stenberg     2017-11-06 15:52:15 +0100 156)     mozilla::net::AddrInfo *mFirstTRR; /* temporary TRR storage */
2fc71b1789f46 netwerk/dns/nsHostResolver.h     (Michael Wu          2011-09-28 23:19:26 -0700 157)     bool    onQueue;  /* true if pending and on the queue (not yet given to getaddrinfo())*/
2fc71b1789f46 netwerk/dns/nsHostResolver.h     (Michael Wu          2011-09-28 23:19:26 -0700 158)     bool    usingAnyThread; /* true if off queue and contributing to mActiveAnyThreadCount */
408f2e928bb70 netwerk/dns/nsHostResolver.h     (Patrick McManus     2013-07-19 18:40:00 -0400 159)     bool    mDoomed; /* explicitly expired */
e693238971900 netwerk/dns/nsHostResolver.h     (John Sullivan       2014-09-20 15:10:18 -0700 160)     bool    mGetTtl;
e693238971900 netwerk/dns/nsHostResolver.h     (John Sullivan       2014-09-20 15:10:18 -0700 161) 
e693238971900 netwerk/dns/nsHostResolver.h     (John Sullivan       2014-09-20 15:10:18 -0700 162)     // The number of times ReportUnusable() has been called in the record's
e693238971900 netwerk/dns/nsHostResolver.h     (John Sullivan       2014-09-20 15:10:18 -0700 163)     // lifetime.
e693238971900 netwerk/dns/nsHostResolver.h     (John Sullivan       2014-09-20 15:10:18 -0700 164)     uint32_t mBlacklistedCount;
e693238971900 netwerk/dns/nsHostResolver.h     (John Sullivan       2014-09-20 15:10:18 -0700 165) 
b1e46ec83f2c0 netwerk/dns/nsHostResolver.h     (Daniel Stenberg     2014-09-24 23:14:00 -0400 166)     // when the results from this resolve is returned, it is not to be
b1e46ec83f2c0 netwerk/dns/nsHostResolver.h     (Daniel Stenberg     2014-09-24 23:14:00 -0400 167)     // trusted, but instead a new resolve must be made!
b1e46ec83f2c0 netwerk/dns/nsHostResolver.h     (Daniel Stenberg     2014-09-24 23:14:00 -0400 168)     bool    mResolveAgain;
b1e46ec83f2c0 netwerk/dns/nsHostResolver.h     (Daniel Stenberg     2014-09-24 23:14:00 -0400 169) 
dac053425bb2c netwerk/dns/nsHostResolver.h     (Patrick McManus     2011-07-21 09:18:01 -0400 170)     // a list of addresses associated with this record that have been reported
dac053425bb2c netwerk/dns/nsHostResolver.h     (Patrick McManus     2011-07-21 09:18:01 -0400 171)     // as unusable. the list is kept as a set of strings to make it independent
dac053425bb2c netwerk/dns/nsHostResolver.h     (Patrick McManus     2011-07-21 09:18:01 -0400 172)     // of gencnt.
dac053425bb2c netwerk/dns/nsHostResolver.h     (Patrick McManus     2011-07-21 09:18:01 -0400 173)     nsTArray<nsCString> mBlacklistedItems;
dac053425bb2c netwerk/dns/nsHostResolver.h     (Patrick McManus     2011-07-21 09:18:01 -0400 174) 
0ede5e596799e netwerk/dns/nsHostResolver.h     (Ehsan Akhgari       2014-08-05 09:20:24 -0400 175)     explicit nsHostRecord(const nsHostKey *key);           /* use Create() instead */
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 176)    ~nsHostRecord();
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 177) };
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 178) 
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 179) /**
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 180)  * ResolveHost callback object.  It's PRCList members are used by
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 181)  * the nsHostResolver and should not be used by anything else.
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 182)  */
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 183) class NS_NO_VTABLE nsResolveHostCallback : public PRCList
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 184) {
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 185) public:
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 186)     /**
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 187)      * OnLookupComplete
750c6269ec1dc netwerk/dns/nsHostResolver.h     (Sylvestre Ledru     2017-07-06 14:00:35 +0200 188)      *
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 189)      * this function is called to complete a host lookup initiated by
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 190)      * nsHostResolver::ResolveHost.  it may be invoked recursively from
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 191)      * ResolveHost or on an unspecified background thread.
750c6269ec1dc netwerk/dns/nsHostResolver.h     (Sylvestre Ledru     2017-07-06 14:00:35 +0200 192)      *
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 193)      * NOTE: it is the responsibility of the implementor of this method
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 194)      * to handle the callback in a thread safe manner.
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 195)      *
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 196)      * @param resolver
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 197)      *        nsHostResolver object associated with this result
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 198)      * @param record
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 199)      *        the host record containing the results of the lookup
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 200)      * @param status
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 201)      *        if successful, |record| contains non-null results
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 202)      */
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 203)     virtual void OnLookupComplete(nsHostResolver *resolver,
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 204)                                   nsHostRecord   *record,
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 205)                                   nsresult        status) = 0;
f2b99bb1107d1 netwerk/dns/nsHostResolver.h     (Steve Workman       2012-01-20 15:14:46 -0800 206)     /**
f2b99bb1107d1 netwerk/dns/nsHostResolver.h     (Steve Workman       2012-01-20 15:14:46 -0800 207)      * EqualsAsyncListener
f2b99bb1107d1 netwerk/dns/nsHostResolver.h     (Steve Workman       2012-01-20 15:14:46 -0800 208)      *
f2b99bb1107d1 netwerk/dns/nsHostResolver.h     (Steve Workman       2012-01-20 15:14:46 -0800 209)      * Determines if the listener argument matches the listener member var.
f2b99bb1107d1 netwerk/dns/nsHostResolver.h     (Steve Workman       2012-01-20 15:14:46 -0800 210)      * For subclasses not implementing a member listener, should return false.
f2b99bb1107d1 netwerk/dns/nsHostResolver.h     (Steve Workman       2012-01-20 15:14:46 -0800 211)      * For subclasses having a member listener, the function should check if
f2b99bb1107d1 netwerk/dns/nsHostResolver.h     (Steve Workman       2012-01-20 15:14:46 -0800 212)      * they are the same.  Used for cases where a pointer to an object
f2b99bb1107d1 netwerk/dns/nsHostResolver.h     (Steve Workman       2012-01-20 15:14:46 -0800 213)      * implementing nsResolveHostCallback is unknown, but a pointer to
f2b99bb1107d1 netwerk/dns/nsHostResolver.h     (Steve Workman       2012-01-20 15:14:46 -0800 214)      * the original listener is known.
f2b99bb1107d1 netwerk/dns/nsHostResolver.h     (Steve Workman       2012-01-20 15:14:46 -0800 215)      *
f2b99bb1107d1 netwerk/dns/nsHostResolver.h     (Steve Workman       2012-01-20 15:14:46 -0800 216)      * @param aListener
f2b99bb1107d1 netwerk/dns/nsHostResolver.h     (Steve Workman       2012-01-20 15:14:46 -0800 217)      *        nsIDNSListener object associated with the original request
f2b99bb1107d1 netwerk/dns/nsHostResolver.h     (Steve Workman       2012-01-20 15:14:46 -0800 218)      */
f2b99bb1107d1 netwerk/dns/nsHostResolver.h     (Steve Workman       2012-01-20 15:14:46 -0800 219)     virtual bool EqualsAsyncListener(nsIDNSListener *aListener) = 0;
ad236f25f0b6a netwerk/dns/nsHostResolver.h     (Nicholas Nethercote 2013-11-24 15:24:12 -0800 220) 
ad236f25f0b6a netwerk/dns/nsHostResolver.h     (Nicholas Nethercote 2013-11-24 15:24:12 -0800 221)     virtual size_t SizeOfIncludingThis(mozilla::MallocSizeOf) const = 0;
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 222) };
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 223) 
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 224) /**
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 225)  * nsHostResolver - an asynchronous host name resolver.
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 226)  */
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 227) class nsHostResolver
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 228) {
8482ea14026ca netwerk/dns/nsHostResolver.h     (Chris Jones         2011-03-31 23:29:02 -0500 229)     typedef mozilla::CondVar CondVar;
8482ea14026ca netwerk/dns/nsHostResolver.h     (Chris Jones         2011-03-31 23:29:02 -0500 230)     typedef mozilla::Mutex Mutex;
8482ea14026ca netwerk/dns/nsHostResolver.h     (Chris Jones         2011-03-31 23:29:02 -0500 231) 
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 232) public:
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 233)     /**
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 234)      * host resolver instances are reference counted.
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 235)      */
a642dfceae40d netwerk/dns/nsHostResolver.h     (Josh Aas            2012-07-10 10:14:01 -0400 236)     NS_INLINE_DECL_THREADSAFE_REFCOUNTING(nsHostResolver)
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 237) 
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 238)     /**
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 239)      * creates an addref'd instance of a nsHostResolver object.
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 240)      */
e693238971900 netwerk/dns/nsHostResolver.h     (John Sullivan       2014-09-20 15:10:18 -0700 241)     static nsresult Create(uint32_t maxCacheEntries, // zero disables cache
e693238971900 netwerk/dns/nsHostResolver.h     (John Sullivan       2014-09-20 15:10:18 -0700 242)                            uint32_t defaultCacheEntryLifetime, // seconds
e693238971900 netwerk/dns/nsHostResolver.h     (John Sullivan       2014-09-20 15:10:18 -0700 243)                            uint32_t defaultGracePeriod, // seconds
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 244)                            nsHostResolver **resolver);
750c6269ec1dc netwerk/dns/nsHostResolver.h     (Sylvestre Ledru     2017-07-06 14:00:35 +0200 245) 
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 246)     /**
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 247)      * puts the resolver in the shutdown state, which will cause any pending
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 248)      * callbacks to be detached.  any future calls to ResolveHost will fail.
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 249)      */
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 250)     void Shutdown();
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 251) 
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 252)     /**
223dc31f8d5fe netwerk/dns/nsHostResolver.h     (Tim Huang           2017-02-14 12:25:35 +0800 253)      * resolve the given hostname and originAttributes asynchronously.  the caller
223dc31f8d5fe netwerk/dns/nsHostResolver.h     (Tim Huang           2017-02-14 12:25:35 +0800 254)      * can synthesize a synchronous host lookup using a lock and a cvar.  as noted
223dc31f8d5fe netwerk/dns/nsHostResolver.h     (Tim Huang           2017-02-14 12:25:35 +0800 255)      * above the callback will occur re-entrantly from an unspecified thread.  the
223dc31f8d5fe netwerk/dns/nsHostResolver.h     (Tim Huang           2017-02-14 12:25:35 +0800 256)      * host lookup cannot be canceled (cancelation can be layered above this by
223dc31f8d5fe netwerk/dns/nsHostResolver.h     (Tim Huang           2017-02-14 12:25:35 +0800 257)      * having the callback implementation return without doing anything).
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 258)      */
223dc31f8d5fe netwerk/dns/nsHostResolver.h     (Tim Huang           2017-02-14 12:25:35 +0800 259)     nsresult ResolveHost(const char                      *hostname,
223dc31f8d5fe netwerk/dns/nsHostResolver.h     (Tim Huang           2017-02-14 12:25:35 +0800 260)                          const mozilla::OriginAttributes &aOriginAttributes,
223dc31f8d5fe netwerk/dns/nsHostResolver.h     (Tim Huang           2017-02-14 12:25:35 +0800 261)                          uint16_t                         flags,
223dc31f8d5fe netwerk/dns/nsHostResolver.h     (Tim Huang           2017-02-14 12:25:35 +0800 262)                          uint16_t                         af,
223dc31f8d5fe netwerk/dns/nsHostResolver.h     (Tim Huang           2017-02-14 12:25:35 +0800 263)                          const char                      *netInterface,
223dc31f8d5fe netwerk/dns/nsHostResolver.h     (Tim Huang           2017-02-14 12:25:35 +0800 264)                          nsResolveHostCallback           *callback);
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 265) 
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 266)     /**
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 267)      * removes the specified callback from the nsHostRecord for the given
223dc31f8d5fe netwerk/dns/nsHostResolver.h     (Tim Huang           2017-02-14 12:25:35 +0800 268)      * hostname, originAttributes, flags, and address family.  these parameters
223dc31f8d5fe netwerk/dns/nsHostResolver.h     (Tim Huang           2017-02-14 12:25:35 +0800 269)      * should correspond to the parameters passed to ResolveHost.  this function
223dc31f8d5fe netwerk/dns/nsHostResolver.h     (Tim Huang           2017-02-14 12:25:35 +0800 270)      * executes the callback if the callback is still pending with the given status.
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 271)      */
223dc31f8d5fe netwerk/dns/nsHostResolver.h     (Tim Huang           2017-02-14 12:25:35 +0800 272)     void DetachCallback(const char                      *hostname,
223dc31f8d5fe netwerk/dns/nsHostResolver.h     (Tim Huang           2017-02-14 12:25:35 +0800 273)                         const mozilla::OriginAttributes &aOriginAttributes,
223dc31f8d5fe netwerk/dns/nsHostResolver.h     (Tim Huang           2017-02-14 12:25:35 +0800 274)                         uint16_t                         flags,
223dc31f8d5fe netwerk/dns/nsHostResolver.h     (Tim Huang           2017-02-14 12:25:35 +0800 275)                         uint16_t                         af,
223dc31f8d5fe netwerk/dns/nsHostResolver.h     (Tim Huang           2017-02-14 12:25:35 +0800 276)                         const char                      *netInterface,
223dc31f8d5fe netwerk/dns/nsHostResolver.h     (Tim Huang           2017-02-14 12:25:35 +0800 277)                         nsResolveHostCallback           *callback,
223dc31f8d5fe netwerk/dns/nsHostResolver.h     (Tim Huang           2017-02-14 12:25:35 +0800 278)                         nsresult                         status);
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 279) 
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 280)     /**
223dc31f8d5fe netwerk/dns/nsHostResolver.h     (Tim Huang           2017-02-14 12:25:35 +0800 281)      * Cancels an async request associated with the hostname, originAttributes, flags,
f2b99bb1107d1 netwerk/dns/nsHostResolver.h     (Steve Workman       2012-01-20 15:14:46 -0800 282)      * address family and listener.  Cancels first callback found which matches
f2b99bb1107d1 netwerk/dns/nsHostResolver.h     (Steve Workman       2012-01-20 15:14:46 -0800 283)      * these criteria.  These parameters should correspond to the parameters
f2b99bb1107d1 netwerk/dns/nsHostResolver.h     (Steve Workman       2012-01-20 15:14:46 -0800 284)      * passed to ResolveHost.  If this is the last callback associated with the
750c6269ec1dc netwerk/dns/nsHostResolver.h     (Sylvestre Ledru     2017-07-06 14:00:35 +0200 285)      * host record, it is removed from any request queues it might be on.
f2b99bb1107d1 netwerk/dns/nsHostResolver.h     (Steve Workman       2012-01-20 15:14:46 -0800 286)      */
223dc31f8d5fe netwerk/dns/nsHostResolver.h     (Tim Huang           2017-02-14 12:25:35 +0800 287)     void CancelAsyncRequest(const char                      *host,
223dc31f8d5fe netwerk/dns/nsHostResolver.h     (Tim Huang           2017-02-14 12:25:35 +0800 288)                             const mozilla::OriginAttributes &aOriginAttributes,
223dc31f8d5fe netwerk/dns/nsHostResolver.h     (Tim Huang           2017-02-14 12:25:35 +0800 289)                             uint16_t                         flags,
223dc31f8d5fe netwerk/dns/nsHostResolver.h     (Tim Huang           2017-02-14 12:25:35 +0800 290)                             uint16_t                         af,
223dc31f8d5fe netwerk/dns/nsHostResolver.h     (Tim Huang           2017-02-14 12:25:35 +0800 291)                             const char                      *netInterface,
223dc31f8d5fe netwerk/dns/nsHostResolver.h     (Tim Huang           2017-02-14 12:25:35 +0800 292)                             nsIDNSListener                  *aListener,
223dc31f8d5fe netwerk/dns/nsHostResolver.h     (Tim Huang           2017-02-14 12:25:35 +0800 293)                             nsresult                         status);
f2b99bb1107d1 netwerk/dns/nsHostResolver.h     (Steve Workman       2012-01-20 15:14:46 -0800 294)     /**
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 295)      * values for the flags parameter passed to ResolveHost and DetachCallback
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 296)      * that may be bitwise OR'd together.
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 297)      *
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 298)      * NOTE: in this implementation, these flags correspond exactly in value
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 299)      *       to the flags defined on nsIDNSService.
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 300)      */
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 301)     enum {
56ee721e9cf48 netwerk/dns/nsHostResolver.h     (Jonathan Watt       2015-09-14 14:46:47 +0100 302)         RES_BYPASS_CACHE = nsIDNSService::RESOLVE_BYPASS_CACHE,
56ee721e9cf48 netwerk/dns/nsHostResolver.h     (Jonathan Watt       2015-09-14 14:46:47 +0100 303)         RES_CANON_NAME = nsIDNSService::RESOLVE_CANONICAL_NAME,
56ee721e9cf48 netwerk/dns/nsHostResolver.h     (Jonathan Watt       2015-09-14 14:46:47 +0100 304)         RES_PRIORITY_MEDIUM = nsIDNSService::RESOLVE_PRIORITY_MEDIUM,
56ee721e9cf48 netwerk/dns/nsHostResolver.h     (Jonathan Watt       2015-09-14 14:46:47 +0100 305)         RES_PRIORITY_LOW = nsIDNSService::RESOLVE_PRIORITY_LOW,
56ee721e9cf48 netwerk/dns/nsHostResolver.h     (Jonathan Watt       2015-09-14 14:46:47 +0100 306)         RES_SPECULATE = nsIDNSService::RESOLVE_SPECULATE,
56ee721e9cf48 netwerk/dns/nsHostResolver.h     (Jonathan Watt       2015-09-14 14:46:47 +0100 307)         //RES_DISABLE_IPV6 = nsIDNSService::RESOLVE_DISABLE_IPV6, // Not used
56ee721e9cf48 netwerk/dns/nsHostResolver.h     (Jonathan Watt       2015-09-14 14:46:47 +0100 308)         RES_OFFLINE = nsIDNSService::RESOLVE_OFFLINE,
56ee721e9cf48 netwerk/dns/nsHostResolver.h     (Jonathan Watt       2015-09-14 14:46:47 +0100 309)         //RES_DISABLE_IPv4 = nsIDNSService::RESOLVE_DISABLE_IPV4, // Not Used
5bbe5797c4d0d netwerk/dns/nsHostResolver.h     (Daniel Stenberg     2017-11-30 08:28:45 +0100 310)         RES_ALLOW_NAME_COLLISION = nsIDNSService::RESOLVE_ALLOW_NAME_COLLISION,
5bbe5797c4d0d netwerk/dns/nsHostResolver.h     (Daniel Stenberg     2017-11-30 08:28:45 +0100 311)         RES_DISABLE_TRR = nsIDNSService::RESOLVE_DISABLE_TRR
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 312)     };
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 313) 
ad236f25f0b6a netwerk/dns/nsHostResolver.h     (Nicholas Nethercote 2013-11-24 15:24:12 -0800 314)     size_t SizeOfIncludingThis(mozilla::MallocSizeOf mallocSizeOf) const;
ad236f25f0b6a netwerk/dns/nsHostResolver.h     (Nicholas Nethercote 2013-11-24 15:24:12 -0800 315) 
b1e46ec83f2c0 netwerk/dns/nsHostResolver.h     (Daniel Stenberg     2014-09-24 23:14:00 -0400 316)     /**
b1e46ec83f2c0 netwerk/dns/nsHostResolver.h     (Daniel Stenberg     2014-09-24 23:14:00 -0400 317)      * Flush the DNS cache.
b1e46ec83f2c0 netwerk/dns/nsHostResolver.h     (Daniel Stenberg     2014-09-24 23:14:00 -0400 318)      */
b1e46ec83f2c0 netwerk/dns/nsHostResolver.h     (Daniel Stenberg     2014-09-24 23:14:00 -0400 319)     void FlushCache();
b1e46ec83f2c0 netwerk/dns/nsHostResolver.h     (Daniel Stenberg     2014-09-24 23:14:00 -0400 320) 
9a19d53468acd netwerk/dns/nsHostResolver.h     (Daniel Stenberg     2017-11-06 15:52:15 +0100 321)     enum LookupStatus {
9a19d53468acd netwerk/dns/nsHostResolver.h     (Daniel Stenberg     2017-11-06 15:52:15 +0100 322)       LOOKUP_OK,
9a19d53468acd netwerk/dns/nsHostResolver.h     (Daniel Stenberg     2017-11-06 15:52:15 +0100 323)       LOOKUP_RESOLVEAGAIN,
9a19d53468acd netwerk/dns/nsHostResolver.h     (Daniel Stenberg     2017-11-06 15:52:15 +0100 324)     };
9a19d53468acd netwerk/dns/nsHostResolver.h     (Daniel Stenberg     2017-11-06 15:52:15 +0100 325) 
9a19d53468acd netwerk/dns/nsHostResolver.h     (Daniel Stenberg     2017-11-06 15:52:15 +0100 326)     LookupStatus OnLookupComplete(nsHostRecord *, nsresult, mozilla::net::AddrInfo *);
9a19d53468acd netwerk/dns/nsHostResolver.h     (Daniel Stenberg     2017-11-06 15:52:15 +0100 327) 
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 328) private:
e693238971900 netwerk/dns/nsHostResolver.h     (John Sullivan       2014-09-20 15:10:18 -0700 329)    explicit nsHostResolver(uint32_t maxCacheEntries,
e693238971900 netwerk/dns/nsHostResolver.h     (John Sullivan       2014-09-20 15:10:18 -0700 330)                            uint32_t defaultCacheEntryLifetime,
e693238971900 netwerk/dns/nsHostResolver.h     (John Sullivan       2014-09-20 15:10:18 -0700 331)                            uint32_t defaultGracePeriod);
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 332)    ~nsHostResolver();
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 333) 
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 334)     nsresult Init();
eaf658685b215 netwerk/dns/nsHostResolver.h     (Daniel Stenberg     2017-12-07 11:22:05 +0100 335)     mozilla::net::ResolverMode Mode();
9a19d53468acd netwerk/dns/nsHostResolver.h     (Daniel Stenberg     2017-11-06 15:52:15 +0100 336)     nsresult TrrLookup(nsHostRecord *);
94a34572a6c20 netwerk/dns/nsHostResolver.h     (Daniel Stenberg     2017-11-24 12:00:58 +0100 337)     nsresult NativeLookup(nsHostRecord *);
94a34572a6c20 netwerk/dns/nsHostResolver.h     (Daniel Stenberg     2017-11-24 12:00:58 +0100 338)     nsresult NameLookup(nsHostRecord *);
2fc71b1789f46 netwerk/dns/nsHostResolver.h     (Michael Wu          2011-09-28 23:19:26 -0700 339)     bool     GetHostToLookup(nsHostRecord **m);
94a34572a6c20 netwerk/dns/nsHostResolver.h     (Daniel Stenberg     2017-11-24 12:00:58 +0100 340)     bool TRRDone(nsHostRecord *);
0b05677c7671d netwerk/dns/nsHostResolver.h     (Daniel Stenberg     2017-11-24 14:21:43 +0100 341)     bool NativeDone(nsHostRecord *);
7a99befc3dd90 netwerk/dns/nsHostResolver.h     (Daniel Stenberg     2017-12-04 14:29:39 +0100 342)     bool IsTRRBlacklisted(nsCString host, bool fullhost);
5f9d8858e582e netwerk/dns/nsHostResolver.h     (Daniel Stenberg     2017-12-06 11:39:16 +0100 343)     void TRRBlacklist(nsCString host, bool aFullname);
b1e46ec83f2c0 netwerk/dns/nsHostResolver.h     (Daniel Stenberg     2014-09-24 23:14:00 -0400 344) 
82a2f4564e58b netwerk/dns/src/nsHostResolver.h (Patrick McManus     2008-11-07 18:00:26 -0500 345)     void     DeQueue(PRCList &aQ, nsHostRecord **aResult);
82a2f4564e58b netwerk/dns/src/nsHostResolver.h (Patrick McManus     2008-11-07 18:00:26 -0500 346)     void     ClearPendingQueue(PRCList *aPendingQueue);
82a2f4564e58b netwerk/dns/src/nsHostResolver.h (Patrick McManus     2008-11-07 18:00:26 -0500 347)     nsresult ConditionallyCreateThread(nsHostRecord *rec);
07b1c34b3c02f netwerk/dns/nsHostResolver.h     (Adrian Lungu        2013-08-16 11:49:57 -0700 348) 
07b1c34b3c02f netwerk/dns/nsHostResolver.h     (Adrian Lungu        2013-08-16 11:49:57 -0700 349)     /**
07b1c34b3c02f netwerk/dns/nsHostResolver.h     (Adrian Lungu        2013-08-16 11:49:57 -0700 350)      * Starts a new lookup in the background for entries that are in the grace
07b1c34b3c02f netwerk/dns/nsHostResolver.h     (Adrian Lungu        2013-08-16 11:49:57 -0700 351)      * period with a failed connect or all cached entries are negative.
07b1c34b3c02f netwerk/dns/nsHostResolver.h     (Adrian Lungu        2013-08-16 11:49:57 -0700 352)      */
07b1c34b3c02f netwerk/dns/nsHostResolver.h     (Adrian Lungu        2013-08-16 11:49:57 -0700 353)     nsresult ConditionallyRefreshRecord(nsHostRecord *rec, const char *host);
88fb5326fdb9b netwerk/dns/nsHostResolver.h     (Steve Workman       2014-09-24 09:56:13 -0700 354) 
82a2f4564e58b netwerk/dns/src/nsHostResolver.h (Patrick McManus     2008-11-07 18:00:26 -0500 355)     static void  MoveQueue(nsHostRecord *aRec, PRCList &aDestQ);
750c6269ec1dc netwerk/dns/nsHostResolver.h     (Sylvestre Ledru     2017-07-06 14:00:35 +0200 356) 
9f60672fc1d10 netwerk/dns/src/nsHostResolver.h (Arpad Borsos        2008-10-10 17:04:34 +0200 357)     static void ThreadFunc(void *);
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 358) 
d5b3d5d636c66 netwerk/dns/nsHostResolver.h     (Patrick McManus     2011-12-16 21:24:17 -0500 359)     enum {
d5b3d5d636c66 netwerk/dns/nsHostResolver.h     (Patrick McManus     2011-12-16 21:24:17 -0500 360)         METHOD_HIT = 1,
d5b3d5d636c66 netwerk/dns/nsHostResolver.h     (Patrick McManus     2011-12-16 21:24:17 -0500 361)         METHOD_RENEWAL = 2,
d5b3d5d636c66 netwerk/dns/nsHostResolver.h     (Patrick McManus     2011-12-16 21:24:17 -0500 362)         METHOD_NEGATIVE_HIT = 3,
d5b3d5d636c66 netwerk/dns/nsHostResolver.h     (Patrick McManus     2011-12-16 21:24:17 -0500 363)         METHOD_LITERAL = 4,
d5b3d5d636c66 netwerk/dns/nsHostResolver.h     (Patrick McManus     2011-12-16 21:24:17 -0500 364)         METHOD_OVERFLOW = 5,
d5b3d5d636c66 netwerk/dns/nsHostResolver.h     (Patrick McManus     2011-12-16 21:24:17 -0500 365)         METHOD_NETWORK_FIRST = 6,
d5b3d5d636c66 netwerk/dns/nsHostResolver.h     (Patrick McManus     2011-12-16 21:24:17 -0500 366)         METHOD_NETWORK_SHARED = 7
d5b3d5d636c66 netwerk/dns/nsHostResolver.h     (Patrick McManus     2011-12-16 21:24:17 -0500 367)     };
d5b3d5d636c66 netwerk/dns/nsHostResolver.h     (Patrick McManus     2011-12-16 21:24:17 -0500 368) 
653220a84cdeb netwerk/dns/nsHostResolver.h     (Daniel Stenberg     2017-12-12 11:22:16 +0100 369)     // Options for Telemetry::DNS_TRR_RACE
653220a84cdeb netwerk/dns/nsHostResolver.h     (Daniel Stenberg     2017-12-12 11:22:16 +0100 370)     enum {
653220a84cdeb netwerk/dns/nsHostResolver.h     (Daniel Stenberg     2017-12-12 11:22:16 +0100 371)         DNS_RACE_TRR_WON = 0,
653220a84cdeb netwerk/dns/nsHostResolver.h     (Daniel Stenberg     2017-12-12 11:22:16 +0100 372)         DNS_RACE_NATIVE_WON = 1,
653220a84cdeb netwerk/dns/nsHostResolver.h     (Daniel Stenberg     2017-12-12 11:22:16 +0100 373)         DNS_RACE_TRR_UNUSED = 2,
653220a84cdeb netwerk/dns/nsHostResolver.h     (Daniel Stenberg     2017-12-12 11:22:16 +0100 374)     };
653220a84cdeb netwerk/dns/nsHostResolver.h     (Daniel Stenberg     2017-12-12 11:22:16 +0100 375) 
653220a84cdeb netwerk/dns/nsHostResolver.h     (Daniel Stenberg     2017-12-12 11:22:16 +0100 376)     // Options for Telemetry::DNS_NO_TRR_REASON
653220a84cdeb netwerk/dns/nsHostResolver.h     (Daniel Stenberg     2017-12-12 11:22:16 +0100 377)     enum {
653220a84cdeb netwerk/dns/nsHostResolver.h     (Daniel Stenberg     2017-12-12 11:22:16 +0100 378)         TRR_FAILED = 0,
653220a84cdeb netwerk/dns/nsHostResolver.h     (Daniel Stenberg     2017-12-12 11:22:16 +0100 379)         TRR_HOST_BLACKLISTED = 1,
653220a84cdeb netwerk/dns/nsHostResolver.h     (Daniel Stenberg     2017-12-12 11:22:16 +0100 380)         TRR_STS_DISABLED = 2
653220a84cdeb netwerk/dns/nsHostResolver.h     (Daniel Stenberg     2017-12-12 11:22:16 +0100 381)     };
653220a84cdeb netwerk/dns/nsHostResolver.h     (Daniel Stenberg     2017-12-12 11:22:16 +0100 382) 
f813447550db8 netwerk/dns/nsHostResolver.h     (Ehsan Akhgari       2012-08-22 11:56:38 -0400 383)     uint32_t      mMaxCacheEntries;
e693238971900 netwerk/dns/nsHostResolver.h     (John Sullivan       2014-09-20 15:10:18 -0700 384)     uint32_t      mDefaultCacheLifetime; // granularity seconds
e693238971900 netwerk/dns/nsHostResolver.h     (John Sullivan       2014-09-20 15:10:18 -0700 385)     uint32_t      mDefaultGracePeriod; // granularity seconds
ad236f25f0b6a netwerk/dns/nsHostResolver.h     (Nicholas Nethercote 2013-11-24 15:24:12 -0800 386)     mutable Mutex mLock;    // mutable so SizeOfIncludingThis can be const
8482ea14026ca netwerk/dns/nsHostResolver.h     (Chris Jones         2011-03-31 23:29:02 -0500 387)     CondVar       mIdleThreadCV;
36267c5b2efda netwerk/dns/nsHostResolver.h     (Nicholas Nethercote 2015-05-19 16:46:17 -0700 388)     PLDHashTable  mDB;
82a2f4564e58b netwerk/dns/src/nsHostResolver.h (Patrick McManus     2008-11-07 18:00:26 -0500 389)     PRCList       mHighQ;
82a2f4564e58b netwerk/dns/src/nsHostResolver.h (Patrick McManus     2008-11-07 18:00:26 -0500 390)     PRCList       mMediumQ;
82a2f4564e58b netwerk/dns/src/nsHostResolver.h (Patrick McManus     2008-11-07 18:00:26 -0500 391)     PRCList       mLowQ;
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 392)     PRCList       mEvictionQ;
f813447550db8 netwerk/dns/nsHostResolver.h     (Ehsan Akhgari       2012-08-22 11:56:38 -0400 393)     uint32_t      mEvictionQSize;
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 394)     PRTime        mCreationTime;
82a2f4564e58b netwerk/dns/src/nsHostResolver.h (Patrick McManus     2008-11-07 18:00:26 -0500 395)     PRIntervalTime mLongIdleTimeout;
82a2f4564e58b netwerk/dns/src/nsHostResolver.h (Patrick McManus     2008-11-07 18:00:26 -0500 396)     PRIntervalTime mShortIdleTimeout;
79d3bb249cf64 netwerk/dns/nsHostResolver.h     (Valentin Gosu       2012-12-10 09:13:55 -0500 397) 
3308649cc5056 netwerk/dns/nsHostResolver.h     (Patrick McManus     2015-08-20 12:14:40 -0400 398)     mozilla::Atomic<bool>     mShutdown;
3308649cc5056 netwerk/dns/nsHostResolver.h     (Patrick McManus     2015-08-20 12:14:40 -0400 399)     mozilla::Atomic<uint32_t> mNumIdleThreads;
3308649cc5056 netwerk/dns/nsHostResolver.h     (Patrick McManus     2015-08-20 12:14:40 -0400 400)     mozilla::Atomic<uint32_t> mThreadCount;
3308649cc5056 netwerk/dns/nsHostResolver.h     (Patrick McManus     2015-08-20 12:14:40 -0400 401)     mozilla::Atomic<uint32_t> mActiveAnyThreadCount;
3308649cc5056 netwerk/dns/nsHostResolver.h     (Patrick McManus     2015-08-20 12:14:40 -0400 402)     mozilla::Atomic<uint32_t> mPendingCount;
3308649cc5056 netwerk/dns/nsHostResolver.h     (Patrick McManus     2015-08-20 12:14:40 -0400 403) 
e693238971900 netwerk/dns/nsHostResolver.h     (John Sullivan       2014-09-20 15:10:18 -0700 404)     // Set the expiration time stamps appropriately.
e693238971900 netwerk/dns/nsHostResolver.h     (John Sullivan       2014-09-20 15:10:18 -0700 405)     void PrepareRecordExpiration(nsHostRecord* rec) const;
e693238971900 netwerk/dns/nsHostResolver.h     (John Sullivan       2014-09-20 15:10:18 -0700 406) 
fe6a4ef142281 netwerk/dns/nsHostResolver.h     (Daniel Stenberg     2017-12-13 11:43:22 +0100 407)     RefPtr<mozilla::DataStorage> mStorage;
79d3bb249cf64 netwerk/dns/nsHostResolver.h     (Valentin Gosu       2012-12-10 09:13:55 -0500 408) public:
79d3bb249cf64 netwerk/dns/nsHostResolver.h     (Valentin Gosu       2012-12-10 09:13:55 -0500 409)     /*
79d3bb249cf64 netwerk/dns/nsHostResolver.h     (Valentin Gosu       2012-12-10 09:13:55 -0500 410)      * Called by the networking dashboard via the DnsService2
79d3bb249cf64 netwerk/dns/nsHostResolver.h     (Valentin Gosu       2012-12-10 09:13:55 -0500 411)      */
79d3bb249cf64 netwerk/dns/nsHostResolver.h     (Valentin Gosu       2012-12-10 09:13:55 -0500 412)     void GetDNSCacheEntries(nsTArray<mozilla::net::DNSCacheEntries> *);
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 413) };
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 414) 
028d2077b6267 netwerk/dns/src/nsHostResolver.h (                    2007-03-22 10:30:00 -0700 415) #endif // nsHostResolver_h__
